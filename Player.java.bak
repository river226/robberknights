/**
 * Group 5 Robber Knights Game
 *
 * The Player Class:
 *
 * The Player Class holds and manages the players deck, hand and knights 
 * The player has a color and an id that is a number
 * 
 */

class Player() {

	private final int id;
	private final String color;
	private PlayerTiles tiles;
	private int remainingKnights;
	
	// constructor, initialize variables
	public Player(int num) {
		id = num;
		
		switch(id) {
			case(1): color = "Red";
			case(2): color = "Blue";
			case(3): color = "Yellow";
			case(4): color = "Green"
		}
		
		tiles = new PlayerTiles();
		
		// player starts out with 30 knights
		remainingKnights = 30;
	}
	
	// Get the players color 
	public String getColor() {
		return color;
	}
	
	// Get the Hand 
	public Tile[] getHand() {
		return tiles.showHand();
	}
	
	// Get the number of knights left to play
	public int remainingKnights() {
		return remainingKnights;
	}
	
	// Get the Score value of the Tile
	public void playKnights(int count) {
		remainingKnights -= count;
	}
	
	// Get the a tile from the hand
	public Tile makeMove(int location) {
		Tile t = tiles.playTile(location);
		tiles.draw();
		return t;
	}
	
	// Set Knights onto the Tile
	public void setKnight(int[] token) {
		if(4-numKnights < token.size())
			throw new Exception;
			
		for(int i = 0; i < token.size(); i++) {
			knights[numKnights] = token[i];
			numKnights++;
		}
	}
	
	// Retrieve Knights from the top of the Knight Stack
	public int[] popKnight(int pop){
		if(4-numKnights < token.size())
			throw new Exception;
			
		int[pop] removed;
		int valid = topKnight();
		
		for(int i = 0; i < pop; i++){
			if(topKnight() != valid)
				throw new Exception;
			
			removed[i] = knights[numKnights - 1];
			numKnights--;
		}
		
		return removed;
	}
	
	// Return the current winning Knight
	public int topKnight() {
		return knights[numKnights - 1];
	}
	
	// Return the required knights to take the Tile
	public int minKnight() {
		return enviroment;
	}
}